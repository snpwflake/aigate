import { DashboardStats } from "@/types/dashboard";

interface StatsGridProps {
  stats?: DashboardStats;
  loading: boolean;
}

export default function StatsGrid({ stats, loading }: StatsGridProps) {
  const statItems = [
    {
      title: "API —Å“±—Ä–∞—É–ª–∞—Ä",
      shortTitle: "–°“±—Ä–∞—É–ª–∞—Ä", // –ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –º–æ–±–∏–ª–∫–∏
      value: stats?.total_requests || 0,
      label: "–ë–∞—Ä–ª—ã“ì—ã",
      format: (val: number) => val.toLocaleString(),
      icon: "üìä",
    },
    {
      title: "–¢–æ–∫–µ–Ω–¥–µ—Ä",
      shortTitle: "–¢–æ–∫–µ–Ω–¥–µ—Ä",
      value: stats?.total_tokens || 0,
      label: "–ü–∞–π–¥–∞–ª–∞–Ω—ã–ª“ì–∞–Ω",
      format: (val: number) => {
        // –ù–∞ –º–æ–±–∏–ª–∫–µ —Å–æ–∫—Ä–∞—â–∞–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
        if (window.innerWidth < 768 && val >= 1000000) {
          return (val / 1000000).toFixed(1) + "M";
        } else if (window.innerWidth < 768 && val >= 1000) {
          return (val / 1000).toFixed(1) + "K";
        }
        return val.toLocaleString();
      },
      icon: "üî§",
    },
    {
      title: "–®—ã“ì—ã–Ω",
      shortTitle: "–®—ã“ì—ã–Ω",
      value: stats?.total_cost || 0,
      label: "‚Ç∏",
      format: (val: number) => val.toFixed(2),
      icon: "üí∞",
    },
    {
      title: "API –∫—ñ–ª—Ç—Ç–µ—Ä",
      shortTitle: "–ö—ñ–ª—Ç—Ç–µ—Ä",
      value: stats?.api_keys_count || 0,
      label: "–ë–µ–ª—Å–µ–Ω–¥—ñ",
      format: (val: number) => val.toString(),
      icon: "üîë",
    },
  ];

  if (loading) {
    return (
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6 mb-6 md:mb-8">
        {[...Array(4)].map((_, i) => (
          <div
            key={i}
            className="bg-white p-3 md:p-6 rounded-lg md:rounded-xl shadow-sm border-l-4 border-l-primary-500"
          >
            <div className="animate-pulse">
              <div className="h-3 md:h-4 bg-gray-200 rounded w-3/4 mb-2 md:mb-4"></div>
              <div className="h-5 md:h-8 bg-gray-200 rounded w-1/2 mb-1 md:mb-2"></div>
              <div className="h-2 md:h-3 bg-gray-200 rounded w-1/4"></div>
            </div>
          </div>
        ))}
      </div>
    );
  }

  return (
    <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 md:gap-6 mb-6 md:mb-8">
      {statItems.map((item) => (
        <div
          key={item.title}
          className="bg-white p-3 md:p-6 rounded-lg md:rounded-xl shadow-sm border-l-4 border-l-primary-500 hover:shadow-md transition-shadow"
        >
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –Ω–∞ –º–æ–±–∏–ª–∫–µ */}
          <div className="flex items-center gap-1 md:gap-0 mb-2 md:mb-4">
            <span className="text-sm md:hidden">{item.icon}</span>
            <h3 className="text-xs md:text-sm font-medium text-gray-500 uppercase tracking-wide">
              <span className="md:hidden">{item.shortTitle}</span>
              <span className="hidden md:block">{item.title}</span>
            </h3>
          </div>

          {/* –ó–Ω–∞—á–µ–Ω–∏–µ - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä */}
          <div className="text-lg md:text-3xl font-bold text-gray-900 mb-1 leading-tight">
            {item.format(item.value)}
          </div>

          {/* –õ–µ–π–±–ª - –º–µ–Ω—å—à–µ –Ω–∞ –º–æ–±–∏–ª–∫–µ */}
          <div className="text-xs md:text-sm text-gray-500">{item.label}</div>
        </div>
      ))}
    </div>
  );
}
