import { NextRequest, NextResponse } from "next/server";
import { pool } from "@/lib/database";
import { authenticateRequest } from "@/lib/auth";
import { ApiResponse } from "@/types/api";

export async function POST(request: NextRequest) {
  try {
    const auth = await authenticateRequest(request);
    if (!auth) {
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
        },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { amount, payment_method = "test" } = body;
    const userId = auth.userId;

    console.log("üí∞ Top up balance for user:", userId, "amount:", amount);

    if (!amount || amount <= 0 || amount > 50000) {
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ (–æ—Ç 1 –¥–æ 50000 ‚Ç∏)",
        },
        { status: 400 }
      );
    }

    const connection = await pool.getConnection();
    await connection.beginTransaction();

    try {
      // Get current balance
      const [currentUser] = await connection.execute(
        "SELECT balance FROM users WHERE id = ? FOR UPDATE",
        [userId]
      );

      if ((currentUser as any[]).length === 0) {
        return NextResponse.json<ApiResponse>(
          {
            success: false,
            message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
          },
          { status: 404 }
        );
      }

      const currentBalance = parseFloat((currentUser as any[])[0].balance) || 0;
      const newBalance = currentBalance + parseFloat(amount);

      // Update user balance
      await connection.execute("UPDATE users SET balance = ? WHERE id = ?", [
        newBalance,
        userId,
      ]);

      // Record transaction
      const [transactionResult] = (await connection.execute(
        `
        INSERT INTO balance_transactions 
        (user_id, transaction_type, amount, balance_before, balance_after, description, reference_id) 
        VALUES (?, 'deposit', ?, ?, ?, ?, ?)
      `,
        [
          userId,
          amount,
          currentBalance,
          newBalance,
          payment_method === "test"
            ? "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
            : "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
          `topup_${Date.now()}_${userId}`,
        ]
      )) as any;

      await connection.commit();

      console.log("‚úÖ Balance topped up successfully");

      return NextResponse.json<ApiResponse>({
        success: true,
        message: `–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} ‚Ç∏`,
        data: {
          transaction_id: transactionResult.insertId,
          old_balance: currentBalance,
          new_balance: newBalance,
          amount: parseFloat(amount),
        },
      });
    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }
  } catch (error) {
    console.error("‚ùå Error topping up balance:", error);
    return NextResponse.json<ApiResponse>(
      {
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      },
      { status: 500 }
    );
  }
}
