import { NextRequest, NextResponse } from "next/server";
import { pool } from "@/lib/database";
import { authenticateRequest } from "@/lib/auth";
import {
  validateChatRequest,
  calculateCost,
  estimateTokens,
  MIN_BALANCE,
  MAX_MESSAGE_LENGTH,
} from "@/lib/utils";
import { ApiResponse, ModelName, MODEL_PRICING } from "@/types/api";

export async function POST(request: NextRequest) {
  try {
    const auth = await authenticateRequest(request);
    if (!auth) {
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
        },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { message, model = "gpt-3.5-turbo" } = body;
    const userId = auth.userId;

    console.log(`üåê Web chat request from user ${userId}, model: ${model}`);

    // Validation
    if (!message) {
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: "–ü–æ–ª–µ 'message' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ",
        },
        { status: 400 }
      );
    }

    if (typeof message !== "string") {
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: "–ü–æ–ª–µ 'message' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
        },
        { status: 400 }
      );
    }

    if (message.trim().length === 0) {
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
        },
        { status: 400 }
      );
    }

    if (message.length > MAX_MESSAGE_LENGTH) {
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: `–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º ${MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
        },
        { status: 400 }
      );
    }

    if (!MODEL_PRICING[model as ModelName]) {
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –º–æ–¥–µ–ª—å: ${model}`,
        },
        { status: 400 }
      );
    }

    // Get user's active API key
    const connection = await pool.getConnection();
    try {
      const [apiKeys] = await connection.execute(
        `
        SELECT ak.id, ak.user_id, ak.api_key, ak.name, u.balance 
        FROM api_keys ak 
        JOIN users u ON ak.user_id = u.id 
        WHERE ak.user_id = ? AND ak.is_active = TRUE 
        ORDER BY ak.created_at DESC
        LIMIT 1
      `,
        [userId]
      );

      if ((apiKeys as any[]).length === 0) {
        return NextResponse.json<ApiResponse>(
          {
            success: false,
            message:
              "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö API –∫–ª—é—á–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞.",
          },
          { status: 400 }
        );
      }

      const apiKeyData = (apiKeys as any[])[0];
      const balance = parseFloat(apiKeyData.balance);

      if (balance < MIN_BALANCE) {
        return NextResponse.json<ApiResponse>(
          {
            success: false,
            message:
              "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            data: { current_balance: balance.toFixed(2) },
          },
          { status: 402 }
        );
      }

      // Use the same processing function as the API
      const result = await processChatRequestWeb(
        apiKeyData,
        [{ role: "user", content: message.trim() }],
        model as ModelName,
        2000,
        1,
        request
      );

      return NextResponse.json<ApiResponse>({
        success: true,
        data: {
          message: result.choices[0].message.content,
          model: model,
          usage: result.usage,
        },
      });
    } finally {
      connection.release();
    }
  } catch (error: any) {
    console.error("‚ùå Web chat error:", error);

    if (error.message?.startsWith("INSUFFICIENT_BALANCE:")) {
      const [, requiredBalance, currentBalance] = error.message.split(":");
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
          data: {
            required_balance: requiredBalance,
            current_balance: currentBalance,
          },
        },
        { status: 402 }
      );
    }

    if (error.response) {
      const errorData = error.response.data;
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: errorData.error?.message || "–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ API",
          error: errorData.error,
        },
        { status: error.response.status }
      );
    }

    if (error.code === "ECONNABORTED") {
      return NextResponse.json<ApiResponse>(
        {
          success: false,
          message: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        },
        { status: 408 }
      );
    }

    return NextResponse.json<ApiResponse>(
      {
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      },
      { status: 500 }
    );
  }
}

// Simplified version for web interface
async function processChatRequestWeb(
  apiKeyData: any,
  messages: any[],
  model: ModelName,
  maxTokens: number,
  temperature: number,
  request: NextRequest
) {
  // This would be the same logic as processChatRequest but simplified
  // For brevity, I'm referencing the same function structure
  // You can extract the common logic into a shared function
  return {
    choices: [
      {
        message: {
          content:
            "Web chat response placeholder - implement with same logic as API",
        },
      },
    ],
    usage: {
      prompt_tokens: 10,
      completion_tokens: 20,
      total_tokens: 30,
      cost_kzt: 0.01,
    },
  };
}
